setwd("~/Copy/DSc&MachineLearning/DataPreprocessing")
dataset = read.csv('Data.csv')
View(dataset)
# Taking care of missing data
dataset$Age = ifelse(is.na(dataset$Age),
ave(dataset$Age, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Age)
View(dataset)
View(dataset)
dataset$Age = ifelse(is.na(dataset$Age),
ave(dataset$Age, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Age)
dataset$Salary = ifelse(is.na(dataset$Salary),
ave(dataset$Salary, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Salary)
View(dataset)
View(dataset)
dataset$Country = factor(dataset$Country,
levels = c('France', 'Spain', 'Germany'),
labels = c(1, 2, 3))
dataset$Purchased = factor(dataset$Purchased,
levels = c('Yes', 'No'),
labels = c(1, 0))
install.packages('caTools')
library(caTools)
split = sample.split(dataset$Purchased, SplitRatio = 0.8)
split()
split
training_set =  subset(dataset, split == TRUE)
training_set =  subset(dataset, split == TRUE)
test_set =  subset(dataset, split == FALSE)
View(test_set)
View(test_set)
View(training_set)
View(training_set)
setwd("~/Copy/DataScienceAndMachineLearning/DataPreprocessing")
training_set = scale(training_set)
test_set = scale(test_set)
View(training_set)
View(training_set)
# Feature scaling
training_set[, 2:3] = scale(training_set[, 2:3])
test_set[, 2:3] = scale(test_set[, 2:3])
setwd("~/Copy/DataScienceAndMachineLearning/Regression")
# -*- coding: utf-8 -*-
"""
Created on Tue Nov  8 17:37:43 2016
@author: cov-127
"""
# Contains mathematical tools
import numpy as np
# Used for plotting
import matplotlib.pyplot as plt
# Used for importing and managing datasets
import pandas as pd
# Importing the dataset
dataset = pd.read_csv('Salary_Data.csv')
import numpy as np
# Used for plotting
import matplotlib.pyplot as plt
# Used for importing and managing datasets
import pandas as pd
# Importing the dataset
dataset = pd.read_csv('Salary_Data.csv')
import numpy as np
dataset = read.csv('Salary_Data.csv')
View(dataset)
View(dataset)
library(caTools)
set.seed(123)
split = sample.split(dataset$Salary, SplitRatio = 2/3)
training_set =  subset(dataset, split == TRUE)
test_set =  subset(dataset, split == FALSE)
View(test_set)
View(test_set)
View(training_set)
View(training_set)
regressor = lm(formula = Salary ~ YearsExperience, data = training_set)
summary(regressor)
# Predicting the Test set result
y_pred = predict(regressor, newdata = test_set)
y_pred
install.packages('ggplot2')
install.packages('ggplot2')
install.packages('ggplot2')
